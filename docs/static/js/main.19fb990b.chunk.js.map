{"version":3,"sources":["Images/logo.png","Images/portalIcon.png","Components/CharacterCard.js","Components/CharacterNotFound.js","Components/CharacterList.js","Components/Filter.js","Components/Header.js","Components/CharacterNotExist.js","Components/CharacterDetail.js","Components/Loader.js","Components/App.js","Services/getDataApi.js","serviceWorker.js","index.js"],"names":["module","exports","CharacterCard","props","id","name","image","specie","className","to","key","alt","src","CharacterNotFound","message","CharacterList","characterListFiltered","charactersList","filter","character","toLowerCase","includes","inputText","length","sort","prev","localeCompare","map","Filter","onSubmit","placeholder","type","value","onChange","ev","preventDefault","handleInputData","currentTarget","Header","img","CharacterNotExist","CharacterDetail","status","class","otherStatus","origin","episode","portalIcon","Loader","App","state","bind","renderCharacter","renderCharacterList","fetch","then","response","json","data","results","species","setState","this","characterId","parseInt","match","params","foundCharacter","find","path","render","React","Component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.19fb990b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.75509f2e.png\";","module.exports = __webpack_public_path__ + \"static/media/portalIcon.d05ea33b.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst CharacterCard = (props) => {\n  const { id, name, image, specie } = props;\n  return (\n    <Link className='link' to={`/character/${id}`}>\n      <div className='list-card' key={id}>\n        <img className='list-img' alt={name} src={image}></img>\n        <h3 className='list-title'>{name}</h3>\n        <p className='list-subtitle'>{specie}</p>\n      </div>\n    </Link>\n  );\n};\n\nCharacterCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  image: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  specie: PropTypes.string.isRequired,\n};\n\nexport default CharacterCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CharacterNotFound = (props) => (\n  <div className='not-found-container'>\n    <img\n      src='https://media.giphy.com/media/da0NgyClHpA4jqUoav/giphy.gif'\n      alt='Rick'\n      className='not-found-img'\n    ></img>\n    <h3 className='not-found-title'>{props.message}</h3>\n  </div>\n);\n\nCharacterNotFound.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default CharacterNotFound;\n","import React from 'react';\nimport CharacterCard from './CharacterCard';\nimport PropTypes from 'prop-types';\nimport CharacterNotFound from './CharacterNotFound';\n\nconst CharacterList = (props) => {\n  const characterListFiltered = props.charactersList.filter((character) =>\n    character.name.toLowerCase().includes(props.inputText.toLowerCase())\n  );\n  return (\n    <div className='list'>\n      <ul className='list-container'>\n        {characterListFiltered.length > 0 ? (\n          characterListFiltered\n            .sort((prev, character) => prev.name.localeCompare(character.name))\n            .map((character) => (\n              <li className='list-el' key={character.id}>\n                <CharacterCard\n                  id={character.id}\n                  name={character.name}\n                  image={character.image}\n                  specie={character.specie}\n                />\n              </li>\n            ))\n        ) : (\n          <CharacterNotFound\n            message={`No hay ningÃºn personaje que coincida con la palabra '${props.inputText}'`}\n          />\n        )}\n      </ul>\n    </div>\n  );\n};\n\nCharacterList.propTypes = {\n  charactersList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  inputText: PropTypes.string.isRequired,\n};\n\nexport default CharacterList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Filter = (props) => {\n  function HandleFilter(ev) {\n    ev.preventDefault();\n    props.handleInputData({\n      value: ev.currentTarget.value,\n      name: ev.currentTarget.name,\n    });\n  }\n  return (\n    <div className='form' onSubmit={props.onSubmit}>\n      <form>\n        <input\n          className='form-input-text'\n          placeholder='Search'\n          type='search'\n          name='name'\n          key='search'\n          value={props.value}\n          onChange={HandleFilter}\n        ></input>\n      </form>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  handleInputData: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport img from '../Images/logo.png';\n\nconst Header = () => (\n  <header className='header-logo'>\n    <img className='header-logo-img' alt='logo Rick and Morty' src={img}></img>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst CharacterNotExist = (props) => (\n  <div>\n    <div className='not-found-container'>\n      <img\n        src='https://media.giphy.com/media/da0NgyClHpA4jqUoav/giphy.gif'\n        alt='Rick'\n        className='not-found-img'\n      ></img>\n      <h3 className='not-found-title'>{props.message}</h3>\n    </div>\n    <Link className='link-detail' to={`/`}>\n      <div className='not-found-return'>\n        <button className='not-found-return-btn'>Back to Homepage</button>\n      </div>\n    </Link>\n  </div>\n);\n\nCharacterNotExist.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default CharacterNotExist;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport portalIcon from '../Images/portalIcon.png';\nimport { Link } from 'react-router-dom';\n\nconst deadStatus = (status) => {\n  return (\n    <>\n      {status} <i className='fas fa-cross'></i>\n    </>\n  );\n};\nconst otherStatus = (status) =>\n  status === 'Alive' ? (\n    status\n  ) : (\n    <>\n      {status} <i class='fas fa-question'></i>\n    </>\n  );\n\nconst CharacterDetail = (props) => {\n  return (\n    <div className='character-detail-card' key={props.character.id}>\n      <div className='character-detail-img-container'>\n        <img\n          className='character-detail-img'\n          alt={props.character.name}\n          src={props.character.image}\n        ></img>\n      </div>\n      <div className='character-detail-text'>\n        <h3 className='character-detail-name'>{props.character.name}</h3>\n        <p className='character-detail-info'>\n          Status:{' '}\n          {props.character.status === 'Dead'\n            ? deadStatus(props.character.status)\n            : otherStatus(props.character.status)}\n        </p>\n        <p className='character-detail-info'>\n          Species:{' '}\n          {props.character.specie === 'Human' ? (\n            <>\n              {props.character.specie} <i class='fas fa-user-alt'></i>\n            </>\n          ) : (\n            <>\n              {props.character.specie} <i class='fas fa-user-alt-slash'></i>\n            </>\n          )}\n        </p>\n        <p className='character-detail-info'>\n          Origin: {props.character.origin}\n        </p>\n        <p className='character-detail-info'>\n          Episodes: {props.character.episode}\n        </p>\n      </div>\n      <div className='character-detail-icon-container'>\n        <Link className='link-detail' to={`/`}>\n          <img\n            className='character-detail-icon'\n            alt='Volver'\n            src={portalIcon}\n          ></img>\n          <p className='character-detail-return'> Go Back </p>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nCharacterDetail.propTypes = {\n  character: PropTypes.object.isRequired,\n};\n\nexport default CharacterDetail;\n","import React from 'react';\n\nconst Loader = () => {\n  return (\n    <div className='loader-container'>\n      <h3 className='loader-title'>Cargando los datos . . .</h3>\n      <img\n        className='loader-img'\n        alt='Cargando'\n        src='https://media.giphy.com/media/i2tLw5ZyikSFdkeGHT/giphy.gif'\n      ></img>\n    </div>\n  );\n};\n\nexport default Loader;\n","import '../Stylesheets/App.scss';\nimport React from 'react';\nimport { getDataApi } from '../Services/getDataApi';\nimport { Route, Switch } from 'react-router-dom';\nimport CharacterList from './CharacterList';\nimport Filter from './Filter';\nimport Header from './Header';\nimport CharacterNotExist from './CharacterNotExist';\nimport CharacterDetail from './CharacterDetail';\nimport Loader from './Loader';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      charactersList: [],\n      name: '',\n    };\n    this.handleInputData = this.handleInputData.bind(this);\n    this.renderCharacter = this.renderCharacter.bind(this);\n    this.renderCharacterList = this.renderCharacterList.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    getDataApi().then((data) => {\n      this.setState({\n        charactersList: data,\n      });\n    });\n  }\n\n  handleInputData(data) {\n    this.setState({\n      [data.name]: data.value,\n    });\n  }\n\n  renderCharacter(props) {\n    const characterId = parseInt(props.match.params.id);\n    const foundCharacter = this.state.charactersList.find(\n      (character) => character.id === characterId\n    );\n    if (foundCharacter) {\n      return <CharacterDetail character={foundCharacter} />;\n    } else if (this.state.charactersList.length <= 0) {\n      return <Loader />;\n    } else\n      return (\n        <CharacterNotExist message={'El personaje que buscas no existe.'} />\n      );\n  }\n\n  onSubmit(ev) {\n    ev.preventDefault();\n  }\n\n  renderCharacterList() {\n    return this.state.charactersList.length === 0 ? (\n      <Loader />\n    ) : (\n      <>\n        <Filter\n          handleInputData={this.handleInputData}\n          value={this.state.name}\n          onSubmit={this.onSubmit}\n        />\n        <CharacterList\n          charactersList={this.state.charactersList}\n          inputText={this.state.name}\n        />\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <main>\n          <Header />\n          <Switch>\n            <Route path='/character/:id' render={this.renderCharacter} />\n            <Route path='/' render={this.renderCharacterList} />\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const ENDPOINT = 'https://rickandmortyapi.com/api/character/';\n\nconst getDataApi = () => {\n  return fetch(ENDPOINT)\n    .then((response) => response.json())\n    .then((data) => {\n      return data.results.map((character) => {\n        return {\n          id: character.id,\n          name: character.name,\n          specie: character.species,\n          status: character.status,\n          origin: character.origin.name,\n          image: character.image,\n          episode: character.episode.length,\n        };\n      });\n    });\n};\n\nexport { getDataApi };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Stylesheets/App.scss';\nimport App from './Components/App';\nimport { HashRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}