{"version":3,"sources":["Stylesheets/logo.png","Components/CharacterCard.js","Components/CharacterList.js","Components/Filter.js","Components/Header.js","Components/App.js","Services/getDataApi.js","serviceWorker.js","index.js"],"names":["module","exports","CharacterCard","props","id","name","image","specie","key","alt","src","CharacterList","charactersList","filter","character","toLowerCase","includes","inputText","map","Filter","className","placeholder","type","value","onChange","ev","handleInputData","currentTarget","Header","img","App","state","bind","fetch","then","response","json","data","results","species","status","origin","episode","length","console","log","setState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,qMCqB5BC,G,MAlBO,SAACC,GAAW,IACxBC,EAA4BD,EAA5BC,GAAIC,EAAwBF,EAAxBE,KAAMC,EAAkBH,EAAlBG,MAAOC,EAAWJ,EAAXI,OACzB,OACE,yBAAKC,IAAKJ,GACR,yBAAKK,IAAKJ,EAAMK,IAAKJ,IACrB,4BAAKD,GACL,2BAAIE,MCoBKI,EAzBO,SAACR,GACrB,OACE,4BACGA,EAAMS,eACJC,QAAO,SAACC,GAAD,OACNA,EAAUT,KAAKU,cAAcC,SAASb,EAAMc,UAAUF,kBAEvDG,KAAI,SAACJ,GAAD,OACH,wBAAIN,IAAKM,EAAUV,IACjB,kBAAC,EAAD,CACEA,GAAIU,EAAUV,GACdC,KAAMS,EAAUT,KAChBC,MAAOQ,EAAUR,MACjBC,OAAQO,EAAUP,eCMjBY,EArBA,SAAChB,GAOd,OACE,0BAAMiB,UAAU,cACd,2BACEC,YAAY,SACZC,KAAK,OACLjB,KAAK,OACLG,IAAI,SACJe,MAAOpB,EAAMoB,MACbC,SAdN,SAAsBC,GACpBtB,EAAMuB,gBAAgB,CACpBH,MAAOE,EAAGE,cAAcJ,MACxBlB,KAAMoB,EAAGE,cAActB,Y,gBCDduB,EAFA,kBAAM,yBAAKnB,IAAI,sBAAsBC,IAAKmB,OCiD1CC,E,kDA3Cb,WAAY3B,GAAQ,IAAD,8BACjB,cAAMA,IACD4B,MAAQ,CACXnB,eAAgB,GAChBP,KAAM,IAER,EAAKqB,gBAAkB,EAAKA,gBAAgBM,KAArB,gBANN,E,gEASE,IAAD,OCfbC,MAHQ,8CAIZC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,OAAOA,EAAKC,QAAQpB,KAAI,SAACJ,GACvB,MAAO,CACLV,GAAIU,EAAUV,GACdC,KAAMS,EAAUT,KAChBE,OAAQO,EAAUyB,QAClBC,OAAQ1B,EAAU0B,OAClBC,OAAQ3B,EAAU2B,OAAOpC,KACzBC,MAAOQ,EAAUR,MACjBoC,QAAS5B,EAAU4B,QAAQC,cDKpBT,MAAK,SAACG,GACjBO,QAAQC,IAAIR,GAEZ,EAAKS,SAAS,CACZlC,eAAgByB,S,sCAKNA,GACdU,KAAKD,SAAL,eACGT,EAAKhC,KAAOgC,EAAKd,U,+BAKpB,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEM,gBAAiBqB,KAAKrB,gBACtBH,MAAOwB,KAAKhB,MAAMd,YAEpB,kBAAC,EAAD,CACEL,eAAgBmC,KAAKhB,MAAMnB,eAC3BK,UAAW8B,KAAKhB,MAAM1B,Y,GApCd2C,IAAMC,WEIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.1cfb3909.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.75509f2e.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CharacterCard = (props) => {\n  const { id, name, image, specie } = props;\n  return (\n    <div key={id}>\n      <img alt={name} src={image}></img>\n      <h3>{name}</h3>\n      <p>{specie}</p>\n    </div>\n  );\n};\n\nCharacterCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  image: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  specie: PropTypes.string.isRequired,\n};\n\nexport default CharacterCard;\n","import React from 'react';\nimport CharacterCard from './CharacterCard';\nimport PropTypes from 'prop-types';\n\nconst CharacterList = (props) => {\n  return (\n    <ul>\n      {props.charactersList\n        .filter((character) =>\n          character.name.toLowerCase().includes(props.inputText.toLowerCase())\n        )\n        .map((character) => (\n          <li key={character.id}>\n            <CharacterCard\n              id={character.id}\n              name={character.name}\n              image={character.image}\n              specie={character.specie}\n            />\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nCharacterList.propTypes = {\n  data: PropTypes.object,\n};\n\nexport default CharacterList;\n","import React from 'react';\n\nconst Filter = (props) => {\n  function HandleFilter(ev) {\n    props.handleInputData({\n      value: ev.currentTarget.value,\n      name: ev.currentTarget.name,\n    });\n  }\n  return (\n    <form className='input-text'>\n      <input\n        placeholder='Search'\n        type='text'\n        name='name'\n        key='search'\n        value={props.value}\n        onChange={HandleFilter}\n      ></input>\n    </form>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport img from '../Stylesheets/logo.png';\n\nconst Header = () => <img alt='logo Rick and Morty' src={img}></img>;\n\nexport default Header;\n","import '../Stylesheets/App.css';\nimport React from 'react';\nimport { getDataApi } from '../Services/getDataApi';\nimport CharacterList from './CharacterList';\nimport Filter from './Filter';\nimport Header from './Header';\nimport CharacterDetail from './CharacterDetail';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      charactersList: [],\n      name: '',\n    };\n    this.handleInputData = this.handleInputData.bind(this);\n  }\n\n  componentDidMount() {\n    getDataApi().then((data) => {\n      console.log(data);\n\n      this.setState({\n        charactersList: data,\n      });\n    });\n  }\n\n  handleInputData(data) {\n    this.setState({\n      [data.name]: data.value,\n    });\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <Header />\n        <Filter\n          handleInputData={this.handleInputData}\n          value={this.state.inputText}\n        />\n        <CharacterList\n          charactersList={this.state.charactersList}\n          inputText={this.state.name}\n        />\n        {/* <CharacterDetail charactersList={this.state.charactersList} /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const ENDPOINT = 'https://rickandmortyapi.com/api/character/';\n\nconst getDataApi = () => {\n  return fetch(ENDPOINT)\n    .then((response) => response.json())\n    .then((data) => {\n      return data.results.map((character) => {\n        return {\n          id: character.id,\n          name: character.name,\n          specie: character.species,\n          status: character.status,\n          origin: character.origin.name,\n          image: character.image,\n          episode: character.episode.length,\n        };\n      });\n    });\n};\n\nexport { getDataApi };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}